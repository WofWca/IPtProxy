diff --git a/client/client_test.go b/client/client_test.go
index 84e9cc1..52a4cfe 100644
--- a/client/client_test.go
+++ b/client/client_test.go
@@ -1,4 +1,4 @@
-package main
+package snowflakeclient
 
 import (
 	"testing"
diff --git a/client/snowflake.go b/client/snowflake.go
index a1b97fa..c39a82e 100644
--- a/client/snowflake.go
+++ b/client/snowflake.go
@@ -1,8 +1,7 @@
 // Client transport plugin for the Snowflake pluggable transport.
-package main
+package snowflakeclient
 
 import (
-	"flag"
 	"io"
 	"io/ioutil"
 	"log"
@@ -18,7 +17,6 @@ import (
 	pt "git.torproject.org/pluggable-transports/goptlib.git"
 	sf "git.torproject.org/pluggable-transports/snowflake.git/client/lib"
 	"git.torproject.org/pluggable-transports/snowflake.git/common/nat"
-	"git.torproject.org/pluggable-transports/snowflake.git/common/safelog"
 	"github.com/pion/webrtc/v2"
 )
 
@@ -26,6 +24,9 @@ const (
 	DefaultSnowflakeCapacity = 1
 )
 
+var sigChan = make(chan os.Signal, 1)
+
+
 // Accept local SOCKS connections and pass them to the handler.
 func socksAcceptLoop(ln *pt.SocksListener, tongue sf.Tongue) {
 	defer ln.Close()
@@ -74,22 +75,15 @@ func parseIceServers(s string) []webrtc.ICEServer {
 	return servers
 }
 
-func main() {
-	iceServersCommas := flag.String("ice", "", "comma-separated list of ICE servers")
-	brokerURL := flag.String("url", "", "URL of signaling broker")
-	frontDomain := flag.String("front", "", "front domain")
-	logFilename := flag.String("log", "", "name of log file")
-	logToStateDir := flag.Bool("log-to-state-dir", false, "resolve the log file relative to tor's pt state dir")
-	keepLocalAddresses := flag.Bool("keep-local-addresses", false, "keep local LAN address ICE candidates")
-	unsafeLogging := flag.Bool("unsafe-logging", false, "prevent logs from being scrubbed")
-	max := flag.Int("max", DefaultSnowflakeCapacity,
-		"capacity for number of multiplexed WebRTC peers")
+// Start the Snowflake client.
+func Start(iceServersCommas, brokerURL, frontDomain, logFilename *string, logToStateDir, keepLocalAddresses, unsafeLogging *bool, max *int) {
+	if *max < DefaultSnowflakeCapacity {
+		*max = DefaultSnowflakeCapacity
+	}
 
 	// Deprecated
-	oldLogToStateDir := flag.Bool("logToStateDir", false, "use -log-to-state-dir instead")
-	oldKeepLocalAddresses := flag.Bool("keepLocalAddresses", false, "use -keep-local-addresses instead")
-
-	flag.Parse()
+	oldLogToStateDir := logToStateDir
+	oldKeepLocalAddresses := keepLocalAddresses
 
 	log.SetFlags(log.LstdFlags | log.LUTC)
 
@@ -98,7 +92,7 @@ func main() {
 	// buffer is full.
 	// https://bugs.torproject.org/26360
 	// https://bugs.torproject.org/25600#comment:14
-	var logOutput = ioutil.Discard
+	//var logOutput = ioutil.Discard
 	if *logFilename != "" {
 		if *logToStateDir || *oldLogToStateDir {
 			stateDir, err := pt.MakeStateDir()
@@ -113,13 +107,13 @@ func main() {
 			log.Fatal(err)
 		}
 		defer logFile.Close()
-		logOutput = logFile
+		//logOutput = logFile
 	}
 	if *unsafeLogging {
-		log.SetOutput(logOutput)
+		//log.SetOutput(logOutput)
 	} else {
 		// We want to send the log output through our scrubber first
-		log.SetOutput(&safelog.LogScrubber{Output: logOutput})
+		//log.SetOutput(&safelog.LogScrubber{Output: logOutput})
 	}
 
 	log.Println("\n\n\n --- Starting Snowflake Client ---")
@@ -164,7 +158,7 @@ func main() {
 		switch methodName {
 		case "snowflake":
 			// TODO: Be able to recover when SOCKS dies.
-			ln, err := pt.ListenSocks("tcp", "127.0.0.1:0")
+			ln, err := pt.ListenSocks("tcp", "127.0.0.1:52610")
 			if err != nil {
 				pt.CmethodError(methodName, err.Error())
 				break
@@ -179,7 +173,6 @@ func main() {
 	}
 	pt.CmethodsDone()
 
-	sigChan := make(chan os.Signal, 1)
 	signal.Notify(sigChan, syscall.SIGTERM)
 
 	if os.Getenv("TOR_PT_EXIT_ON_STDIN_CLOSE") == "1" {
@@ -204,6 +197,11 @@ func main() {
 	log.Println("snowflake is done.")
 }
 
+func Stop() {
+	log.Printf("synthesizing SIGTERM because of Stop call")
+	sigChan <- syscall.SIGTERM
+}
+
 // loop through all provided STUN servers until we exhaust the list or find
 // one that is compatable with RFC 5780
 func updateNATType(servers []webrtc.ICEServer, broker *sf.BrokerChannel) {
diff --git a/proxy/proxy-go_test.go b/proxy/proxy-go_test.go
index e2fb82e..f3232b8 100644
--- a/proxy/proxy-go_test.go
+++ b/proxy/proxy-go_test.go
@@ -1,4 +1,4 @@
-package main
+package snowflakeproxy
 
 import (
 	"bytes"
diff --git a/proxy/snowflake.go b/proxy/snowflake.go
index 276ebed..e91b550 100644
--- a/proxy/snowflake.go
+++ b/proxy/snowflake.go
@@ -1,10 +1,9 @@
-package main
+package snowflakeproxy
 
 import (
 	"bytes"
 	"crypto/rand"
 	"encoding/base64"
-	"flag"
 	"fmt"
 	"io"
 	"io/ioutil"
@@ -465,22 +464,22 @@ func runSession(sid string) {
 	}
 }
 
-func main() {
-	var capacity uint
-	var stunURL string
-	var logFilename string
-	var rawBrokerURL string
-	var unsafeLogging bool
-	var keepLocalAddresses bool
-
-	flag.UintVar(&capacity, "capacity", 10, "maximum concurrent clients")
-	flag.StringVar(&rawBrokerURL, "broker", defaultBrokerURL, "broker URL")
-	flag.StringVar(&relayURL, "relay", defaultRelayURL, "websocket relay URL")
-	flag.StringVar(&stunURL, "stun", defaultSTUNURL, "stun URL")
-	flag.StringVar(&logFilename, "log", "", "log filename")
-	flag.BoolVar(&unsafeLogging, "unsafe-logging", false, "prevent logs from being scrubbed")
-	flag.BoolVar(&keepLocalAddresses, "keep-local-addresses", false, "keep local LAN address ICE candidates")
-	flag.Parse()
+func Start(capacity uint, rawBrokerURL, relayURL, stunURL, logFilename string, unsafeLogging, keepLocalAddresses bool) {
+	if capacity < 1 {
+		capacity = 10
+	}
+
+	if rawBrokerURL == "" {
+		rawBrokerURL = defaultBrokerURL
+	}
+
+	if relayURL == "" {
+		relayURL = defaultRelayURL
+	}
+
+	if stunURL == "" {
+		stunURL = defaultSTUNURL
+	}
 
 	var logOutput io.Writer = os.Stderr
 	log.SetFlags(log.LstdFlags | log.LUTC)
